// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  USER
  ADMIN
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions Question[]
  answers   Answer[]
  votes     Vote[]
}

model Question {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  answers Answer[]
  votes   Vote[]
}

model Answer {
  id        String   @id @default(cuid())
  content   String
  isAccepted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  votes      Vote[]
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?  @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@unique([userId, answerId])
}
